name: Release Management

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      prerelease:
        description: 'Create pre-release'
        required: false
        default: false
        type: boolean

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install bump2version
      run: pip install bump2version
      
    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
    - name: Get current version
      id: current_version
      run: |
        if [ -f "VERSION" ]; then
          echo "version=$(cat VERSION)" >> $GITHUB_OUTPUT
        else
          echo "version=0.1.0" >> $GITHUB_OUTPUT
          echo "0.1.0" > VERSION
        fi
        
    - name: Bump version
      id: bump_version
      run: |
        # Create .bumpversion.cfg if it doesn't exist
        if [ ! -f ".bumpversion.cfg" ]; then
          cat > .bumpversion.cfg << EOF
        [bumpversion]
        current_version = ${{ steps.current_version.outputs.version }}
        commit = True
        tag = True
        tag_name = v{new_version}
        
        [bumpversion:file:VERSION]
        EOF
        fi
        
        # Bump version
        bump2version ${{ github.event.inputs.version_type }}
        
        # Get new version
        NEW_VERSION=$(cat VERSION)
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        
    - name: Generate changelog
      id: changelog
      run: |
        # Simple changelog generation
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        if [ -n "$LAST_TAG" ]; then
          CHANGELOG=$(git log --pretty=format:"- %s" $LAST_TAG..HEAD)
        else
          CHANGELOG=$(git log --pretty=format:"- %s" --max-count=10)
        fi
        
        # Save changelog to file for multiline output
        echo "$CHANGELOG" > changelog.txt
        
    - name: Push changes
      run: |
        git push origin main
        git push origin --tags
        
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.bump_version.outputs.new_version }}
        release_name: Release v${{ steps.bump_version.outputs.new_version }}
        body: |
          ## What's Changed
          
          $(cat changelog.txt)
          
          ## Docker Images
          
          - `ghcr.io/${{ github.repository }}:${{ steps.bump_version.outputs.new_version }}`
          - `ghcr.io/${{ github.repository }}:latest`
          
          ## Installation
          
          ```bash
          docker pull ghcr.io/${{ github.repository }}:${{ steps.bump_version.outputs.new_version }}
          ```
          
          Full Changelog: https://github.com/${{ github.repository }}/compare/${{ steps.current_version.outputs.version }}...v${{ steps.bump_version.outputs.new_version }}
        draft: false
        prerelease: ${{ github.event.inputs.prerelease }}