name: Docker Build and Publish

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write
      
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        platforms: linux/amd64,linux/arm64
        
    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          # set latest tag for default branch
          type=raw,value=latest,enable={{is_default_branch}}
          # set version tag for tags
          type=ref,event=tag
          # set branch name tag for branch pushes
          type=ref,event=branch
          # set pr tag for pull requests
          type=ref,event=pr
          # set sha tag
          type=sha,prefix={{branch}}-,suffix=-{{date 'YYYYMMDD-HHmmss'}},enable={{is_default_branch}}
        labels: |
          org.opencontainers.image.title=Food Receipt Analyzer
          org.opencontainers.image.description=AI-powered food receipt analysis and querying system
          org.opencontainers.image.vendor=Food Receipt Analyzer Team
          
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
          REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
          
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      if: github.event_name != 'pull_request'
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always() && github.event_name != 'pull_request'
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      if: github.event_name != 'pull_request'
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
        format: spdx-json
        output-file: sbom.spdx.json
        
    - name: Upload SBOM
      uses: actions/upload-artifact@v3
      if: github.event_name != 'pull_request'
      with:
        name: sbom
        path: sbom.spdx.json

  test-image:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    strategy:
      matrix:
        platform: [linux/amd64]
        
    steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Test container startup
      run: |
        # Pull the built image
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        
        # Run container in background
        docker run -d --name test-container \
          --platform ${{ matrix.platform }} \
          -p 8501:8501 \
          -e OPENROUTER_API_KEY=test-key \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        
        # Wait for container to be ready
        echo "Waiting for container to start..."
        for i in {1..30}; do
          if docker exec test-container curl -f http://localhost:8501/_stcore/health 2>/dev/null; then
            echo "Container is healthy!"
            break
          fi
          if [ $i -eq 30 ]; then
            echo "Container failed to start properly"
            docker logs test-container
            exit 1
          fi
          sleep 2
        done
        
    - name: Test basic functionality
      run: |
        # Test if the main page loads
        response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8501)
        if [ "$response" != "200" ]; then
          echo "Main page not accessible, HTTP status: $response"
          docker logs test-container
          exit 1
        fi
        echo "Main page is accessible"
        
    - name: Cleanup test container
      if: always()
      run: |
        docker stop test-container || true
        docker rm test-container || true

  security-scan:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Run Grype vulnerability scanner
      uses: anchore/scan-action@v3
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        fail-build: false
        severity-cutoff: high
        
    - name: Upload Grype scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: results.sarif

  publish-release:
    needs: [build, test-image, security-scan]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Create release tags
      run: |
        # Extract version from tag (v1.2.3 -> 1.2.3)
        VERSION=${GITHUB_REF#refs/tags/v}
        MAJOR=$(echo $VERSION | cut -d. -f1)
        MINOR=$(echo $VERSION | cut -d. -f1-2)
        
        # Tag with semantic versions
        docker buildx imagetools create \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
          --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$VERSION \
          --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$MINOR \
          --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$MAJOR \
          --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:stable
          
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          ## Docker Images
          
          - `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}`
          - `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:stable`
          
          ## Changes
          
          See [CHANGELOG.md](CHANGELOG.md) for detailed changes.
          
        draft: false
        prerelease: false